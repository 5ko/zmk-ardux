/*
 * Copyright (c) 2021 Mike "KemoNine" Crosson
 * 2024 modified by Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 6    // default: 10


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// HOST_OS: Linux=1, MacOS=2
#define HOST_OS 1
#include "zmk-helpers/helper.h"
// Unicode on Ubuntu seems to work in Firefox, LibreOffice, Terminator, 
// but not in Kate/KWrite or GEdit. Will implement accents with dead keys.
// #include "zmk-helpers/unicode-chars/currency.dtsi"
// #include "zmk-helpers/unicode-chars/french.dtsi"
// #include "zmk-helpers/unicode-chars/greek.dtsi"
// #include "zmk-helpers/unicode-chars/russian.dtsi"

// #include "the_paintbrush_left.overlay"


// French characters and accents from layout
// "English (US, intl., with AltGr dead keys)":
#define SUP2 RA(N2)
#define DEAD_GRAVE RA(GRAVE)
#define DEAD_TILDE RA(TILDE)
#define DEAD_ACUTE RA(SQT)
#define DEAD_DIAERESIS RA(DQT)
#define DEAD_CIRCUMFLEX RA(N6)
#define DEGREE RA(COLON)
#define C_CDL RA(COMMA)
#define EACUTE RA(E)
#define NTILDE RA(N)
#define S_SRP RA(S)
#define OELIG RA(X)
#define AELIG RA(Z)
#define EURO  RA(5)
#define GBP   RA(DOLLAR)
#define YEN   RA(MINUS)



// ARTS RITA Row
#define T4 0
#define T3 1
#define T2 2
#define T1 3
// EYIO NOSE Row
#define B4 4
#define B3 5
#define B2 6
#define B1 7

// seno
// rita 
// soar
// inet 
// 
// webdev stuff:
// rate
// soni


  
/*****************************************
 * Layer IDs used by the ARDUX keymap
 * Do NOT change these and do NOT change the order of the layers as shown below
 *****************************************/
#define L_BASE 0
#define L_SYM  1
#define L_MED  2
#define L_NUM  3
#define L_NAV  4
#define L_BT_S 5
#define L_FUNC 6
#define L_SCT  7
#define L_MSE  8



// Delay for combo
#undef COMBO_TERM
#define COMBO_TERM 175
#define NAV_TAP_TERM 300
#define TAPDANCE_TERM 400
#define TAPDANCE_2_TERM 300
#define TAPDANCE_3_TERM 400
#define TAPDANCE_4_TERM 500
#define HOLDTAP_TERM 400
#define HOLDTAP_LAYER_TERM 400
#define TIMEOUT_STICKY_LEADER_KEY  5000

&sk {
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&sl { 
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&mt {
  tapping-term-ms = <HOLDTAP_TERM>;
};

/ { behaviors {
  togkey_stikey: behavior_sk_tog {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_TERM>;
    bindings = <&sk>, <&kt>;
  };
  
  caps_tog: behavior_caps_tog {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_TERM>;
    bindings = <&caps_word>, <&kp>;
  };
  
  release_all: release_all {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
      , <&to L_BASE>
      ;
  };
  
  toglay_key: behavior_toglay_key {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_LAYER_TERM>;
    bindings = <&to>, <&kp>;
  };
  
  kd: behavior_keydown {
    compatible = "zmk,behavior-key-toggle";
    #binding-cells = <1>;
    display-name = "Key Toggle On";
    toggle-mode = "on";
  };

  ku: behavior_keyup {
    compatible = "zmk,behavior-key-toggle";
    #binding-cells = <1>;
    display-name = "Key Toggle Off";
    toggle-mode = "off";
  };
  
  lay_off: behavior_layer_off {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer On";
    toggle-mode = "off";

  };
  
  
  
  unmod: macro_release_mods {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&lay_off L_FUNC &lay_off L_MSE &lay_off L_BT_S>
      , <&ku LSHFT &ku LCTRL &ku LALT &ku RALT &ku LGUI>
      ;
  };
  
  
  nxkbly: macro_next_keyboard_layout {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&kp GLOBE &kp LA(LSHFT)>
      ;
  };
  
  
  
  
}; };
#define SK_TK(key) &togkey_stikey key key   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer




// Does this work? 
// ZMK_COMBO(release_mods, &release_all, T1 B1)

// Tap dance is difficult with fingers 3 & 4, better use mod-taps



// Combos NUM layer
ZMK_COMBO(num_7, &mt DOLLAR N7,    T2 T1, L_NUM)
ZMK_COMBO(num_8, &kp N8       , T3 T2   , L_NUM)
ZMK_COMBO(num_0, &mt DEGREE N0, B3 B2   , L_NUM)
ZMK_COMBO(num_9, &kp N9       ,    B2 B1, L_NUM)
// GBP EURO 0Â°
ZMK_COMBO(num_E, &mt RA(DOLLAR) RA(5), T3    T1, L_NUM)
ZMK_COMBO(num_Y, &kp YEN      , B3    B1, L_NUM)
// ZMK_COMBO(num_D, &kp      , T3 T2 T1, L_NUM)
// ZMK_COMBO(num_???, &kp ?, B3 B1, L_NUM)
// ZMK_COMBO(num_???, &kp ?, B3 B2 B1, L_NUM)


// Combos NAV+Mouse layer
ZMK_COMBO(mouse_b1,   &mkp MB1 ,    T2 T1, L_NAV)
ZMK_COMBO(mouse_b2,   &mkp MB2 , T3 T2   , L_NAV)
ZMK_COMBO(mouse_b3,   &mkp MB3 , T3 T2 T1, L_NAV)
ZMK_COMBO(mouse_b3,   &mkp MB4 , T3    T1, L_NAV)
ZMK_COMBO(qnav_up,    &kp UP   , B3 B2   , L_NAV)
ZMK_COMBO(qnav_dn,    &kp DOWN ,    B2 B1, L_NAV)
ZMK_COMBO(qnav_pgup,  &kp PG_UP, B3    B1, L_NAV)
ZMK_COMBO(qnav_pgdn,  &kp PG_DN, B3 B2 B1, L_NAV)

ZMK_TAP_DANCE(left_home, bindings = <&mt HOME LEFT>, <&kp LC(LEFT)>;  tapping-term-ms = <NAV_TAP_TERM>; )
ZMK_TAP_DANCE(right_end, bindings = <&mt END RIGHT>, <&kp LC(RIGHT)>; tapping-term-ms = <NAV_TAP_TERM>; )



// ZMK_COMBO(media_next, &kp K_NEXT,          T2 T1, L_NAV)
// ZMK_COMBO(media_prev, &kp K_PREV,       T3 T2   , L_NAV)
// ZMK_COMBO(media_play, &kp K_PLAY_PAUSE, T3 T2 T1, L_NAV)


// C_AC_UNDO/K_UNDO and K_REDO work in LibreOffice but not in Kate/Gedit/Firefox
// ZMK_COMBO(qnav_undo,  &kp LC(Z),      T3 T2 T1, L_NAV)
// ZMK_COMBO(qnav_redo,  &kp LC(LS(Z)),  B3 B2 B1, L_NAV)

// combos Functions layer
ZMK_COMBO(func_5, &kp F5,    T3 T2   , L_FUNC) // 5=2+3
ZMK_COMBO(func_E, &kp F5, T4       T1, L_FUNC) // 5=1+4
ZMK_COMBO(func_6, &kp F6,    T3    T1, L_FUNC) // 6=2+4
ZMK_COMBO(func_G, &kp F6, T4 T3 T2   , L_FUNC) // 6=1+2+3
ZMK_COMBO(func_7, &kp F7,       T2 T1, L_FUNC) // 7=3+4
ZMK_COMBO(func_H, &kp F7, T4 T3    T1, L_FUNC) // 7=1+2+4
ZMK_COMBO(func_8, &kp F8, T4    T2 T1, L_FUNC) // 8=4+3+1


// Combos BLUETOOTH layer
ZMK_COMBO(layer_bt_select, &sl L_BT_S, T1 B1 T4 B4) // ALL layers
ZMK_COMBO(bt_clear_current_profile, &bt BT_CLR, T3 T2 B3 B2, L_BT_S)



// Combos SYM layer
ZMK_COMBO(combo_ltgt,   &mt GT LT      , T4 T3      , L_SYM)
ZMK_COMBO(combo_equals, &mt TILDE EQUAL,    T3 T2   , L_SYM)



// Combos L_MSE layer
ZMK_COMBO(lay_mouse, &tog L_MSE,    T3 B2 T1)

ZMK_COMBO(combo_mb3,   &mkp MB3,    T3    T1, L_MSE)
ZMK_COMBO(combo_mb4,   &mkp MB4,    T3 T2   , L_MSE)
ZMK_COMBO(combo_mb5,   &mkp MB5,       T2 T1, L_MSE)




// Base letter combos
ZMK_COMBO(combo_b,  &mt AMPS  B, T4 T3      , L_BASE)
ZMK_COMBO(combo_c,  &mt C_CDL C,    T3 T2   , L_BASE)
ZMK_COMBO(combo_d,  &mt DLLR  D,       T2 T1, L_BASE)
ZMK_COMBO(combo_h,  &mt HASH  H,       B2 B1, L_BASE)
ZMK_COMBO(combo_u,  &mt UNDER U,    B3 B2   , L_BASE)
ZMK_COMBO(combo_g,  &mt GBP   G, B4 B3      , L_BASE)

ZMK_COMBO(combo_k,  &mt AELIG K,    T3    T1, L_BASE)
ZMK_COMBO(combo_y,  &mt OELIG Y,    B3    B1, L_BASE)
ZMK_COMBO(combo_j,  &kp       J, T4    T2   , L_BASE)
ZMK_COMBO(combo_z,  &kp       Z, B4    B2   , L_BASE)


ZMK_COMBO(combo_v,  &mt DEAD_DIAERESIS  V, T4       T1, L_BASE)
ZMK_COMBO(combo_x,  &mt DEAD_CIRCUMFLEX X, B4       B1, L_BASE)

ZMK_COMBO(combo_p,  &mt PIPE  P, T4 T3    T1, L_BASE)
ZMK_COMBO(combo_q,  &mt PRCNT Q, B4 B3    B1, L_BASE)

ZMK_COMBO(combo_l,  &mt PLUS  L,    T3 T2 T1, L_BASE)
ZMK_COMBO(combo_m,  &mt MINUS M,    B3 B2 B1, L_BASE)

ZMK_COMBO(combo_f,  &toglay_key L_FUNC F, T4 T3 T2   , L_BASE)
ZMK_COMBO(combo_w,  &mt AT             W, B4 B3 B2   , L_BASE)

ZMK_COMBO(combo_space, &kp SPACE, B4 B3 B2 B1, L_BASE)
// ZMK_COMBO(combo_space, &mt UNDERSCORE SPACE, B4 B3 B2 B1, L_BASE)

// Base punctuation
ZMK_COMBO(combo_slash,  &mt DEAD_ACUTE SLASH, B4       T1, L_BASE)
ZMK_COMBO(combo_backs,  &mt DEAD_GRAVE BSLH , T4       B1, L_BASE)
ZMK_COMBO(combo_comma,  &mt DOT COMMA       ,       B2 T1, L_BASE)
ZMK_COMBO(combo_colon,  &mt COLON SEMI      ,    B2 T2   , L_BASE)
ZMK_COMBO(combo_quote,  &mt DQT SQT         ,    B3 T3   , L_BASE)
ZMK_COMBO(combo_exclq,  &mt QMARK EXCL      , B4 T4      , L_BASE)



// GLOBAL Combos 
ZMK_COMBO(combo_cancel_layers, &to L_BASE, B4 T3, L_FUNC ) //L_FRE add here other layers to cancel
ZMK_COMBO(combo_escape,  &kp ESC, B4 T3     )
ZMK_COMBO(combo_enter, &kp ENTER, T1 B1)

ZMK_COMBO(combo_backspace, &mt LC(BSPC) BSPC,       T2 B1)
ZMK_COMBO(combo_delete,    &mt LC(DEL)  DEL ,    B3 T2   )
ZMK_COMBO(combo_escape,    &kp ESC          , B4 T3      )
ZMK_COMBO(combo_tab,       &mt LS(TAB)  TAB , B4 T3 T2   )



// Combos modifiers
ZMK_COMBO(combo_shift,    &kt  LSHFT,    T3    B1)
ZMK_COMBO(combo_capsock,  &kp  CAPS , T4 T3    B1)
ZMK_COMBO(combo_ctrl,     &kt  LCTRL,    T3 T2 B1)

ZMK_COMBO(combo_alt,      &kt   LALT,    T3 B2 B1)
ZMK_COMBO(combo_altgr,    &sk   RALT, B4 T3 B2 B1)

ZMK_COMBO(combo_gui,      &sk   LGUI, T4 T3 B2 B1)
ZMK_COMBO(combo_kblayout, &nxkbly,    B4 B3 T2 T1)
ZMK_COMBO(combo_unmod,    &unmod,     T4 T3 T2 T1)

// ZMK_COMBO(combo_alt,     &togkey_stikey LALT   LALT,    T3 B2 B1)


// ZMK_COMBO(name, bindings, keypos, layers, timeout, prior_idle, extra)
ZMK_COMBO(combo_reset,   &sys_reset,  0 1 2 3 4 5 6 7)
ZMK_COMBO(combo_reflash, &bootloader, T1 B4 B3 B2 B1)


// TODO: PrintScr,Ins
// Most used keyboard shortcuts Alt+Tab, Alt+Shift+Tab
// 
// Display
// MAYBE? ( ) = { } [ ] > < ~  on SYM






// ZMK_TAP_DANCE(space_dot, bindings = <&lt L_MOD SPACE>, <&kp DOT>, <&kp COMMA>; tapping-term-ms = <TAPDANCE_TERM>; )



/*****************************************
 * Standard ARDUX layer definitions
 * !!!!!!!!!! FOR LEFT HANDED USE !!!!!!!!!!
 *****************************************/

/ { keymap { compatible = "zmk,keymap";
  base {
    display-name = "Base";
    bindings = <
      &lt L_NUM R   &lt L_SCT I   &kp      T   &lt L_SYM A
      &lt L_NAV N   &kp O         &mt STAR S   &lt L_MED E
    >;
  };
  symbols1 {
    display-name = "SYM";
    bindings = <
      &mt RBRC LBRC    &mt RBKT LBKT   &mt RPAR LPAR   &mo L_SYM
      &none   &none  &none &none
    >;
  };
  media {
    display-name = "MED";
    bindings = <
      &kp K_PLAY_PAUSE    &kp K_NEXT     &kp K_VOL_UP           &kp PRINTSCREEN
      &none               &kp K_PREV     &mt K_MUTE K_VOL_DN    &mo L_MED
    >;
  };
  numbers {
    display-name = "NUM";
    bindings = <
      &mo L_NUM    &mt STAR  N3   &mt SUP2 N2    &mt KP_DOT N1
      &none        &mt SLASH N6   &mt STAR N5    &mt COMMA N4
    >;
  };
  quicknav {
    display-name = "NAV";
    bindings = <                      
//       &none       &none         &mt K_MUTE K_VOL_DN   &kp K_VOL_UP
//       &mo L_NAV   &none         &left_home            &right_end
      &none       &mmv MOVE_UP     &mmv MOVE_LEFT   &mmv MOVE_RIGHT
      &mo L_NAV   &mmv MOVE_DOWN   &left_home       &right_end
    >;         
  };
  bt {
    display-name = "BT";
    bindings = <
      &out OUT_BLE   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
      &out OUT_USB   &bt BT_SEL 5  &bt BT_SEL 4  &bt BT_SEL 3
    >;
  };
  func {
    display-name = "FUNC";
    bindings = <
      &kp F1   &kp F2    &kp F3    &kp F4
      &kp F9   &kp F10   &kp F11   &kp F12
    >;
  };
  
  shortcuts {
    display-name = "SHRCT";
    bindings = <
      &none   &mo L_SCT  &mt LC(LS(V)) LS(INS)  &mt LS(DEL) LC(INS)
      &none   &none      &mt LC(LS(S)) LC(S)    &mt LC(LS(Z)) LC(Z)
    >;
  };
  
  mouse { // 
    display-name = "MOUSE";
    bindings = <
     &msc SCRL_UP    &mkp MB2       &mmv MOVE_UP   &mkp MB1
     &msc SCRL_DOWN  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT
    >;
  };
  


}; };
  
//     key <AB08> { [     comma,       less,      ccedilla,         Ccedilla ] };
//     key <AB01> { [	   z,          Z,            ae,               AE ] };
//    key <AB02> { [        x, X,           oe,           OE              ] };
//     key <BKSL> { [ backslash,        bar,       notsign,        brokenbar ] };


