/*
 * Copyright (c) 2021 Mike "KemoNine" Crosson
 * 2024 modified by Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */



#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>


#define HOST_OS 1
// Linux: 1, MacOS:2
#include "zmk-helpers/helper.h"
// #include "zmk-helpers/unicode-chars/currency.dtsi"
// #include "zmk-helpers/unicode-chars/french.dtsi"
// #include "zmk-helpers/unicode-chars/greek.dtsi"
// #include "zmk-helpers/unicode-chars/russian.dtsi"

#include "the_paintbrush_left.overlay"

// ARTS RITA Row
#define KEY_R 0
#define KEY_I 1
#define KEY_T 2
#define KEY_A 3
// EYIO NOSE Row
#define KEY_N 4
#define KEY_O 5
#define KEY_S 6
#define KEY_E 7

// seno
// rita
// soar
// inet

// Define Offsets
// #define LEADING_NONES NONE(0,0,0)
// #define MIDDLE_NONES NONE(0,0,0)
// #define TRAILING_NONES NONE(0,0,0)

// Include main ardux.io keymap
// #include "../../../ardux.dtsi"

/*****************************************
 * Macros for filling in "&none" in the right places in the keymap for re-use needs
 *****************************************/
// #define NONE0(X)
// #define NONE1(X) X
// #define NONE2(X) NONE1(X) X
// #def
// #define NONE5(X) NONE4(X) X
// #define NONE6(X) NONE5(X) X
// #define NONE7(X) NONE6(X) X
// #define NONE8(X) NONE7(X) X
// #define NONE9(X) NONE8(X) X
// #define NONE10(X) NONE9(X) X
// 
// #define NONE(HUNDREDS,TENS,ONES) \
//   NONE##HUNDREDS(NONE10(NONE10(&none))) \
//   NONE##TENS(NONE10(&none)) \
//   NONE##ONES(&none)
  
  
#define TIMEOUT_COMBO_2 175
#define TIMEOUT_COMBO_3 175
#define TIMEOUT_COMBO_4 175
#define TIMEOUT_LAYER_HOLD 200
#define TIMEOUT_STICKY_LEADER_KEY 5000
  
&sk {
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&sl { 
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};

#define BASE_S S
#define BASE_E E
#define BASE_N N
#define BASE_O O
#define BASE_R R
#define BASE_I I
#define BASE_T T
#define BASE_A A

  
/*****************************************
 * Layer IDs used by the ARDUX keymap
 * Do NOT change these and do NOT change the order of the layers as shown below
 *****************************************/
#define L_GLOB -1
#define L_BASE 0
#define L_NUMB 1
#define L_SYMB 2
#define L_PAR  3
#define L_NAV  4
#define L_BT_S 5
#define L_CUST 6
#define L_SYM2 7
#define L_FUNC 8


/*****************************************
 * Standard ARDUX combo definitions
 * These should NOT be changed and are global in scope
 *****************************************/
#undef COMBO_TERM
#define COMBO_TERM 175
// ZMK_COMBO(name, bindings, keypos, layers, timeout, prior_idle, extra)
ZMK_COMBO(reset, &sys_reset, 0 1 2 3 4 5 6 7)
ZMK_COMBO(enter, &kp ENTER, KEY_A KEY_E)

ZMK_COMBO(layer_bt_select, &sl L_BT_S, KEY_A KEY_E KEY_R KEY_N)

#define TAPDANCE_TERM 400
ZMK_TAP_DANCE(n1, bindings = <&kp N1>, <&kp N2>, <&kp N3>; tapping-term-ms = <TAPDANCE_TERM>; )
ZMK_TAP_DANCE(n4, bindings = <&kp N4>, <&kp N5>, <&kp N6>; tapping-term-ms = <TAPDANCE_TERM>; )
ZMK_TAP_DANCE(n7, bindings = <&kp N7>, <&kp N8>, <&kp N9>; tapping-term-ms = <TAPDANCE_TERM>; )

ZMK_COMBO(combo_space, &kp SPACE, KEY_N KEY_O KEY_S KEY_E)


// Combos NUM layer
ZMK_COMBO(num_0, &kp N0, KEY_O KEY_S, L_NUMB)
ZMK_COMBO(num_9, &kp N9, KEY_S KEY_E, L_NUMB)
ZMK_COMBO(num_7, &kp N8, KEY_A KEY_T, L_NUMB)
ZMK_COMBO(num_8, &kp N7, KEY_I KEY_T, L_NUMB)
// ZMK_COMBO(num_comma, &kp COMMA, KEY_I KEY_A, L_NUMB)
// ZMK_COMBO(num_dot,   &kp DOT,   KEY_O KEY_E, L_NUMB)

// ZMK_COMBO(combo_num_bs, &kp BACKSPACE, KEY_T KEY_A, L_NUMB)

// Combos CUSTOM layer
ZMK_COMBO(cust_pgup, &kp PG_UP, KEY_I KEY_T, L_CUST)
ZMK_COMBO(cust_pgdn, &kp PG_DN, KEY_O KEY_S, L_CUST)
ZMK_COMBO(cust_home, &kp HOME, KEY_T KEY_A, L_CUST)
ZMK_COMBO(cust_end,  &kp END,  KEY_S KEY_E, L_CUST)



/*****************************************
 * Standard ARDUX layer definitions
 * !!!!!!!!!! FOR LEFT HANDED USE !!!!!!!!!!
 *****************************************/

/ { keymap { compatible = "zmk,keymap";
  base {
    display-name = "Base";
    bindings = <
      &lt L_NUMB BASE_R    &kp BASE_I  &kp BASE_T   &lt L_PAR  BASE_A
      &lt L_CUST BASE_N    &kp BASE_O  &kp BASE_S   &lt L_SYMB BASE_E
    >;
  };
  numbers {
    display-name = "Number";
    bindings = <
      &mo L_NUMB    &mt STAR N3   &mt PLUS N2   &mt DOT N1
      &none         &mt SLASH N6  &mt MINUS N5  &mt COMMA N4
    >;
  };
  symbols {
    display-name = "Symbol";
    bindings = <
      &kp GRAVE            &kp SEMI  &kp BSLH  &kp EXCL
      &kp EQUAL            &kp MINUS &kp QMARK &mo L_SYMB
    >;
  };
  parentheticals {
    display-name = "Paren";
    bindings = <
      &kp LBRC             &kp LPAR  &kp RPAR  &mo L_PAR
      &kp RBRC             &kp LBKT  &kp RBKT  &none
    >;
  };
  navigation {
    display-name = "Nav";
    bindings = <
      &kp PG_UP            &kp HOME  &kp UP    &kp END
      &kp PG_DN            &kp LEFT  &kp DOWN  &kp RIGHT
    >;
  };
  bt {
    display-name = "BT";
    bindings = <
      &out OUT_BLE   &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0
      &out OUT_USB   &bt BT_SEL 5 &bt BT_SEL 4 &bt BT_SEL 3
    >;
  };
  
  custom {     
    display-name = "Custom";
    bindings = <                      
      &none        &mt UP     &mt LC(LEFT) LEFT    &mt LC(RIGHT) RIGHT
      &mo L_CUST   &mt DOWN   &mt LC(DEL)  DEL     &mt LC(BSPC)  BSPC
    >;         
  };

  
//   big_ardux_symbol { 
//     display-name = "Sym2";
//     bindings = <
//       &kp CARET &kp LBRC &kp RBRC &kp HASH  &kp GRAVE
//       &kp AMPS  &kp LPAR &kp RPAR &kp DLLR  &kp BSLH
//       &kp ASTRK &kp LBKT &kp RBKT &kp PRCNT &kp PIPE
//       BIG_BETWEEN_ROW_THREE_THUMBS
//       &none     &kp SEMI &none
//     >;
//   };
//   big_ardux_function {
//     display-name = "Func";
//     bindings = <
//       &kp F4  &kp F3  &kp F2  &kp F1  &none
//       &kp F8  &kp F7  &kp F6  &kp F5  &none
//       &kp F12 &kp F11 &kp F10 &kp F9 &none
//       BIG_BETWEEN_ROW_THREE_THUMBS
//       &none   &none   &none
//     >;
//   };
}; };


  

