/*
 * Copyright (c) 2021 Mike "KemoNine" Crosson
 * 2024 modified by Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

// Left/Right
#define ARDUX_LEFT 1

// ARTS RITA Row
#define KEY_A 3
#define KEY_T 2
#define KEY_I 1
#define KEY_R 0
// EYIO NOSE Row
#define KEY_E 7
#define KEY_S 6
#define KEY_O 5
#define KEY_N 4

// Define Offsets
#define LEADING_NONES NONE(0,0,0)
#define MIDDLE_NONES NONE(0,0,0)
#define TRAILING_NONES NONE(0,0,0)

// Include main ardux.io keymap
// #include "../../../ardux.dtsi"

/*****************************************
 * Macros for filling in "&none" in the right places in the keymap for re-use needs
 *****************************************/
#define NONE0(X)
#define NONE1(X) X
#define NONE2(X) NONE1(X) X
#define NONE3(X) NONE2(X) X
#define NONE4(X) NONE3(X) X
#define NONE5(X) NONE4(X) X
#define NONE6(X) NONE5(X) X
#define NONE7(X) NONE6(X) X
#define NONE8(X) NONE7(X) X
#define NONE9(X) NONE8(X) X
#define NONE10(X) NONE9(X) X

#define NONE(HUNDREDS,TENS,ONES) \
  NONE##HUNDREDS(NONE10(NONE10(&none))) \
  NONE##TENS(NONE10(&none)) \
  NONE##ONES(&none)
  
  
#define ARDUX_BT_TOP &out OUT_BLE
#define ARDUX_BT_BOTTOM &out OUT_USB
  
#define TIMEOUT_COMBO_2 175
#define TIMEOUT_COMBO_3 175
#define TIMEOUT_COMBO_4 175
#define TIMEOUT_LAYER_HOLD 200
#define TIMEOUT_STICKY_LEADER_KEY 5000
  
&sk {
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&sl { 
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};

#define BASE_A A
#define BASE_T T
#define BASE_I I
#define BASE_R R
#define BASE_E E
#define BASE_S S
#define BASE_O O
#define BASE_N N

  
/*****************************************
 * Layer IDs used by the ARDUX keymap
 * Do NOT change these and do NOT change the order of the layers as shown below
 *****************************************/
#define L_GLOB -1
#define L_BASE 0
#define L_NUMB 1
#define L_SYMB 2
#define L_PAR  3
#define L_NAV  4
#define L_BT_S 5
#define L_CUST 6
#define L_SYM  7
#define L_FUNC 8



/*****************************************
 * Standard ARDUX combo definitions
 * These should NOT be changed and are global in scope
 *****************************************/


/*****************************************
 * Standard ARDUX layer activation definitions
 * These should NOT be changed and are global in scope
 *****************************************/
/ { behaviors {
  
  // Unicode key presses for punctuation
  // Work on different keyboard layouts
  
  uni: unicode {
    compatible = "zmk,behavior-unicode";
    label = "Unicode symbol"; 
    #binding-cells = <1>;
    unicode = <0>; // Combining acute accent
  };
  
  
  
}; };



/*****************************************
 * Standard ARDUX layer definitions
 * !!!!!!!!!! FOR LEFT HANDED USE !!!!!!!!!!
 *****************************************/

/ { keymap { compatible = "zmk,keymap";
  base {
    display-name = "Base";
    bindings = <
      LEADING_NONES
      &lt L_NUMB BASE_R    &kp BASE_I  &kp BASE_T   &lt L_PAR  BASE_A
      MIDDLE_NONES
      &lt L_CUST BASE_N    &kp BASE_O  &kp BASE_S   &lt L_SYMB BASE_E
      TRAILING_NONES
    >;
  };
  numbers {
    display-name = "Number";
    bindings = <
      LEADING_NONES
      &mo L_NUMB    &kp N3    &kp N2    &kp N1
      MIDDLE_NONES
      &none         &kp N6    &kp N5    &uni 0x0301  // Combining Acute
      TRAILING_NONES
    >;
  };
  symbols {
    display-name = "Symbol";
    bindings = <
      LEADING_NONES
      &kp GRAVE            &kp SEMI  &kp BSLH  &kp EXCL
      MIDDLE_NONES
      &kp EQUAL            &kp MINUS &kp QMARK &mo L_SYMB
      TRAILING_NONES
    >;
  };
  parentheticals {
    display-name = "Paren";
    bindings = <
      LEADING_NONES
      &kp LBRC             &kp LPAR  &kp RPAR  &mo L_PAR
      MIDDLE_NONES
      &kp RBRC             &kp LBKT  &kp RBKT  &none
      TRAILING_NONES
    >;
  };
  navigation {
    display-name = "Nav";
    bindings = <
      LEADING_NONES
      &kp PG_UP            &kp HOME  &kp UP    &kp END
      MIDDLE_NONES
      &kp PG_DN            &kp LEFT  &kp DOWN  &kp RIGHT
      TRAILING_NONES
    >;
  };
  bt {
    display-name = "BT";
    bindings = <
      LEADING_NONES
      &out OUT_BLE   &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0
      MIDDLE_NONES
      &out OUT_USB &bt BT_SEL 5 &bt BT_SEL 4 &bt BT_SEL 3
      TRAILING_NONES
    >;
  };
  
  custom {     
    display-name = "Custom";          
    bindings = <                      
      LEADING_NONES                   
      &none           &kp C_VOL_UP  &kp INS   &kp C_MUTE 
      MIDDLE_NONES                    
      &mo L_CUST      &kp C_VOL_DN  &kp PSCRN &sk RSHFT  
      TRAILING_NONES                  
    >;         
  };

  
//   big_ardux_symbol {
//     display-name = "Sym2";
//     bindings = <
//       BIG_LEADING_NONES
//       &kp CARET &kp LBRC &kp RBRC &kp HASH  &kp GRAVE
//       BIG_BETWEEN_ROW_ONE_TWO_NONES
//       &kp AMPS  &kp LPAR &kp RPAR &kp DLLR  &kp BSLH
//       BIG_BETWEEN_ROW_TWO_THREE_NONES
//       &kp ASTRK &kp LBKT &kp RBKT &kp PRCNT &kp PIPE
//       BIG_BETWEEN_ROW_THREE_THUMBS
//       &none     &kp SEMI &none
//       BIG_TRAILING_NONES
//     >;
//   };
//   big_ardux_function {
//     display-name = "Func";
//     bindings = <
//       BIG_LEADING_NONES
//       &kp F4  &kp F3  &kp F2  &kp F1  &none
//       BIG_BETWEEN_ROW_ONE_TWO_NONES
//       &kp F8  &kp F7  &kp F6  &kp F5  &none
//       BIG_BETWEEN_ROW_TWO_THREE_NONES
//       &kp F12 &kp F11 &kp F10 &kp F9 &none
//       BIG_BETWEEN_ROW_THREE_THUMBS
//       &none   &none   &none
//       BIG_TRAILING_NONES
//     >;
//   };
}; };


  

