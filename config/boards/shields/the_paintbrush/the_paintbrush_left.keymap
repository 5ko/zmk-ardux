/*
 * Copyright (c) 2021 Mike "KemoNine" Crosson
 * 2024 modified by Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */



#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>


// HOST_OS: Linux=1, MacOS=2
#define HOST_OS 1
#include "zmk-helpers/helper.h"
// Unicode on Ubuntu seems to work in Firefox, LibreOffice, Terminator, 
// but not in Kate/KWrite or GEdit. Will implement accents with dead keys.
// #include "zmk-helpers/unicode-chars/currency.dtsi"
// #include "zmk-helpers/unicode-chars/french.dtsi"
// #include "zmk-helpers/unicode-chars/greek.dtsi"
// #include "zmk-helpers/unicode-chars/russian.dtsi"

#include "the_paintbrush_left.overlay"

// ARTS RITA Row
#define T4 0
#define T3 1
#define T2 2
#define T1 3
// EYIO NOSE Row
#define B4 4
#define B3 5
#define B2 6
#define B1 7

// seno
// rita 
// soar
// inet 
// 
// webdev stuff:
// rate
// soni


  
/*****************************************
 * Layer IDs used by the ARDUX keymap
 * Do NOT change these and do NOT change the order of the layers as shown below
 *****************************************/
#define L_BASE 0
#define L_MOD  1
#define L_NUMB 2
#define L_QNAV 3
#define L_BT_S 4
#define L_FUNC 5
#define L_SYMB 6




// Delay for combo
#undef COMBO_TERM
#define COMBO_TERM 175
#define TAPDANCE_TERM 400
#define HOLDTAP_TERM 200
#define HOLDTAP_LAYER_TERM 300
#define  TIMEOUT_STICKY_LEADER_KEY  5000

&sk {
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&sl { 
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&mt {
  tapping-term-ms = <HOLDTAP_TERM>;
};

/ { behaviors {
  togkey_stikey: behavior_sk_tog {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_TERM>;
    bindings = <&sk>, <&kt>;
  };
  
  caps_tog: behavior_caps_tog {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_TERM>;
    bindings = <&caps_word>, <&kp>;
  };
  
  release_all: release_all {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
      , <&to L_BASE>
      ;
  };
  
  toglay_key: behavior_toglay_key {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_LAYER_TERM>;
    bindings = <&to>, <&kp>;
  };
  
}; };
#define SK_TK(key) &togkey_stikey key key   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer


// Base letter combos
// etinoars lcpduh fmgbvyw xkjzq
//          2:hducgb -1-1:yk 2-1:pq   3:mlfw    1--1:vx  1-1-:jz 1-2:  4:
// etaonris hdlfcm u gypwb vkjxzq : Zim cryptography
// etaoinsh rdlucm f wypvbg kqjxz : Linotype 
ZMK_COMBO(combo_b,  &kp B      , T4 T3      , L_BASE)
ZMK_COMBO(combo_c,  &kp C      ,    T3 T2   , L_BASE)
ZMK_COMBO(combo_d,  &kp D      ,       T2 T1, L_BASE)
ZMK_COMBO(combo_h,  &kp H      ,       B2 B1, L_BASE)
ZMK_COMBO(combo_u,  &mt UNDER U,    B3 B2   , L_BASE)
ZMK_COMBO(combo_g,  &kp G      , B4 B3      , L_BASE)

ZMK_COMBO(combo_k,  &kp K,    T3    T1, L_BASE)
ZMK_COMBO(combo_y,  &kp Y,    B3    B1, L_BASE)
ZMK_COMBO(combo_j,  &kp J, T4    T2   , L_BASE)
ZMK_COMBO(combo_z,  &kp Z, B4    B2   , L_BASE)


ZMK_COMBO(combo_v,  &kp V, T4       T1, L_BASE)
ZMK_COMBO(combo_x,  &kp X, B4       B1, L_BASE)

ZMK_COMBO(combo_p,  &kp P, T4 T3    T1, L_BASE)
ZMK_COMBO(combo_q,  &kp Q, B4 B3    B1, L_BASE)

ZMK_COMBO(combo_l,  &kp L,    T3 T2 T1, L_BASE)
ZMK_COMBO(combo_m,  &kp M,    B3 B2 B1, L_BASE)
// ZMK_COMBO(combo_f,  &kp F, T4 T3 T2   , L_BASE)
ZMK_COMBO(combo_f,  &toglay_key L_FUNC F, T4 T3 T2   , L_BASE)
ZMK_COMBO(combo_w,  &kp W, B4 B3 B2   , L_BASE)

ZMK_COMBO(combo_space, &kp SPACE, B4 B3 B2 B1, L_BASE)
// ZMK_COMBO(combo_space, &mt UNDERSCORE SPACE, B4 B3 B2 B1, L_BASE)




// Combos editing
ZMK_COMBO(enter_excl, &mt EXCL ENTER, T1 B1)

ZMK_COMBO(backspace, &mt LC(BSPC) BSPC,       T2 B1)
ZMK_COMBO(delete,    &mt LC(DEL)  DEL ,    B3 T2   )
ZMK_COMBO(escape,    &kp ESC          , B4 T3      )
ZMK_COMBO(tab,       &mt LS(TAB)  TAB , B4 T3 T2   )



// Combos modifiers
ZMK_COMBO(ctrl,    &togkey_stikey LCTRL LCTRL,    T3 T2 B1)
ZMK_COMBO(shift,   &togkey_stikey LSHFT LSHFT,    T3    B1)
ZMK_COMBO(capsock, &caps_tog 0 CAPS,              T4 T3    B1)
ZMK_COMBO(alt,     &togkey_stikey LALT   LALT,    T3 B2 B1)
ZMK_COMBO(gui,     &togkey_stikey LGUI   LGUI, T4 T3 B2 B1)
// Toggle keyboard layout FIXME: why Alt+Shift doesn't work? Add macro GLOBE
ZMK_COMBO(kblayout, &kp LA(CAPS),              B4 B3 T2 T1)


// ZMK_COMBO(name, bindings, keypos, layers, timeout, prior_idle, extra)
ZMK_COMBO(reset, &sys_reset, 0 1 2 3 4 5 6 7)
// ZMK_COMBO(release_mods, &release_all, T1 B1)

// ZMK_COMBO(layer_func, &tog L_FUNC, B4 T3 T2)

// Tap dance is difficult with fingers 3 & 4, better use mod-taps
// ZMK_TAP_DANCE(n1, bindings = <&kp N1>, <&kp N2>, <&kp N3>; tapping-term-ms = <TAPDANCE_TERM>; )



// Combos NUM layer
ZMK_COMBO(num_7, &kp N7,    T2 T1, L_NUMB)
ZMK_COMBO(num_8, &kp N8, T3 T2   , L_NUMB)
ZMK_COMBO(num_0, &kp N0, B3 B2   , L_NUMB)
ZMK_COMBO(num_9, &kp N9,    B2 B1, L_NUMB)
// ZMK_COMBO(num_???, &kp ?, T3 T1, L_NUMB)
// ZMK_COMBO(num_???, &kp ?, B3 B1, L_NUMB)
// ZMK_COMBO(num_???, &kp ?, T3 T2 T1, L_NUMB)
// ZMK_COMBO(num_???, &kp ?, B3 B2 B1, L_NUMB)



// Combos QUICK NAV layer
ZMK_COMBO(qnav_up, &kp UP,        B3 B2   , L_QNAV)
ZMK_COMBO(qnav_dn, &kp DOWN,         B2 B1, L_QNAV)
ZMK_COMBO(qnav_pgup, &kp PG_UP,   B3    B1, L_QNAV)
ZMK_COMBO(qnav_pgdn,  &kp PG_DN,  B3 B2 B1, L_QNAV)
#define NAV_TAP_TERM 150
ZMK_TAP_DANCE(left_home, bindings = <&mt HOME LEFT>, <&kp LC(LEFT)>;  tapping-term-ms = <NAV_TAP_TERM>; )
ZMK_TAP_DANCE(right_end, bindings = <&mt END RIGHT>, <&kp LC(RIGHT)>; tapping-term-ms = <NAV_TAP_TERM>; )

ZMK_COMBO(media_next, &kp K_NEXT,          T2 T1, L_QNAV)
ZMK_COMBO(media_prev, &kp K_PREV,       T3 T2   , L_QNAV)
ZMK_COMBO(media_play, &kp K_PLAY_PAUSE, T3 T2 T1, L_QNAV)


// C_AC_UNDO/K_UNDO and K_REDO work in LibreOffice but not in Kate/Gedit/Firefox
// ZMK_COMBO(qnav_undo,  &kp LC(Z),      T3 T2 T1, L_QNAV)
// ZMK_COMBO(qnav_redo,  &kp LC(LS(Z)),  B3 B2 B1, L_QNAV)

// combos Functions layer
ZMK_COMBO(func_9,  &kp F9,  T2 T1, L_FUNC)
ZMK_COMBO(func_10, &kp F10, T4 T3, L_FUNC)
ZMK_COMBO(func_11, &kp F11, B2 B1, L_FUNC)
ZMK_COMBO(func_12, &kp F12, B4 B3, L_FUNC)
ZMK_COMBO(cancel_func,      &to L_BASE, B4 T3      , L_FUNC)
// ZMK_COMBO(cancel_func_2,    &to L_BASE, T4 T3 T2   , L_FUNC)
ZMK_COMBO(cancel_func_3,    &to L_BASE, T4 B4, L_FUNC)
// ZMK_COMBO(cancel_func_4,    &to L_BASE, B4 B3 B2   , L_FUNC)


// Combos BLUETOOTH layer
ZMK_COMBO(layer_bt_select, &sl L_BT_S, T1 B1 T4 B4) // ALL layers
ZMK_COMBO(bt_clear_current_profile, &bt BT_CLR, T3 T2 B3 B2, L_BT_S)



// Combos SYM layer
ZMK_COMBO(combo_ltgt,   &mt GT LT    , T4 T3      , L_SYMB)
ZMK_COMBO(combo_equals, &kp EQUAL    ,    T3 T2   , L_SYMB)


// TODO: Functions F1-F12, Accented characters or combining accents
// Punctuation
// Most used keyboard shortcuts Alt+Tab, Alt+Shift+Tab, Ctrl+(C|X|V|Z),  Alt+Caps
// PrintScr,Ins
// Mouse
// Display


// etinoars lcpduh fmgbvyw xkjzq
// TODO: lc.pduhfm,()g=b:"-;vyw{}0x/k'1[]2&_jz\$q+53*4!|9>#68@%?7<^`~
// TODO: list other stats from keylogger
// modifiers: 

// 
// etinoars lcpduh fmgbvyw xkjzq
//          2:hducgb -1-1:yk 2-1:pq        3:mlfw  1--1:vx  1-1-:jz 1-2:  4:
// etaonris hdlfcm u gypwb vkjxzq : Zim cryptography
// etaoinsh rdlucm f wypvbg kqjxz : Linotype 
// etaoinsh rdlcum w fgypbv kjxqz : Lewand
// 
// 



// ZMK_TAP_DANCE(space_dot, bindings = <&lt L_MOD SPACE>, <&kp DOT>, <&kp COMMA>; tapping-term-ms = <TAPDANCE_TERM>; )



/*****************************************
 * Standard ARDUX layer definitions
 * !!!!!!!!!! FOR LEFT HANDED USE !!!!!!!!!!
 *****************************************/

/ { keymap { compatible = "zmk,keymap";
  base {
    display-name = "Base";
    bindings = <
      &lt L_NUMB R  &kp I  &kp T   &lt L_SYMB A
      &lt L_QNAV N  &kp O  &kp S   &kp E
    >;
  };
  modif {
    display-name = "Mod";
    bindings = <
      SK_TK(LGUI)     &none              SK_TK(LALT)      &mt LS(TAB) TAB
      &kp GLOBE       SK_TK(LSHFT)       SK_TK(LCTRL)     &mo L_MOD
    >;
  };
  numbers {
    display-name = "NUM";
    bindings = <
      &mo L_NUMB   &mt STAR  N3   &mt PLUS  N2   &mt DOT   N1
      &none        &mt SLASH N6   &mt MINUS N5   &mt COMMA N4
    >;
  };
  quicknav {     
    display-name = "QNAV";
    bindings = <                      
      &none        &none         &mt K_MUTE K_VOL_DN   &kp K_VOL_UP
      &mo L_QNAV   &kp LS(F10)   &left_home            &right_end
//       &mo L_QNAV   &kp DOWN   &mt LC(DEL)  DEL     &mt LC(BSPC)  BSPC
    >;         
  };
  bt {
    display-name = "BT";
    bindings = <
      &out OUT_BLE   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
      &out OUT_USB   &bt BT_SEL 5  &bt BT_SEL 4  &bt BT_SEL 3
    >;
  };
  func {
    display-name = "FUNC";
    bindings = <
      &kp F4   &kp F3   &kp F2   &kp F1
      &kp F8   &kp F7   &kp F6   &kp F5
    >;
  };
  
  symbols {
    display-name = "Symbol";
    bindings = <
      &mt RBRC LBRC    &mt RBKT LBKT   &mt RPAR LPAR   &mo L_SYMB
      &kp EQUAL        &kp MINUS       &kp QMARK       &none
    >;
  };
  
//   big_ardux_symbol { 
//     display-name = "Sym2";
//     bindings = <
//       &kp CARET &kp LBRC &kp RBRC &kp HASH  &kp GRAVE
//       &kp AMPS  &kp LPAR &kp RPAR &kp DLLR  &kp BSLH
//       &kp ASTRK &kp LBKT &kp RBKT &kp PRCNT &kp PIPE
//       BIG_BETWEEN_ROW_THREE_THUMBS
//       &none     &kp SEMI &none
//     >;
//   };
//   big_ardux_function {
//     display-name = "Func";
//     bindings = <
//       &kp F4  &kp F3  &kp F2  &kp F1  &none
//       &kp F8  &kp F7  &kp F6  &kp F5  &none
//       &kp F12 &kp F11 &kp F10 &kp F9 &none
//       BIG_BETWEEN_ROW_THREE_THUMBS
//       &none   &none   &none
//     >;
//   };
}; };


  

