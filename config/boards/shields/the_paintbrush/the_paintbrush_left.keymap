/*
 * Copyright (c) 2021 Mike "KemoNine" Crosson
 * 2024 modified by Petko Yotov pmwiki.org/petko
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 6    // default: 10 (currently unused)


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

// HOST_OS: Linux=1, MacOS=2
#define HOST_OS 1
#include "zmk-helpers/helper.h"

// International characters and dead accents from the XKB layout
// "English (US, intl., with AltGr dead keys)":
#define SUP2 RA(N2)
// dead grave
#define D_GRV RA(GRAVE)
// dead acute
#define D_ACU RA(SQT)
// dead diaeresis
#define D_DRS RA(DQT)
// dead circumflex
#define D_CRC RA(N6)
#define DEGREE RA(COLON)
#define C_CDL  RA(COMMA)
#define S_SRP  RA(S)
#define OELIG  RA(X)
#define AELIG  RA(Z)
#define EURO   RA(N5)
#define GBP    RA(DOLLAR)
#define YEN    RA(MINUS)

// edit shortcuts
// C_AC_UNDO/K_UNDO and K_REDO work in LibreOffice 
// but not in Kate/Gedit/Firefox
#define CLIPCOPY   LC(INS)
#define CLIPCUT    LS(DEL)
#define CLIPPASTE  LS(INS)
#define CLIPPASTE2 LC(LS(V))
#define SAVE       LC(S)
#define SAVEAS     LC(LS(S)) 
#define UNDO       LC(Z)
#define REDO       LC(LS(Z))


// Top row RI TA
#define T4 0
#define T3 1
#define T2 2
#define T1 3
// Bottom row NO SE 
#define B4 4
#define B3 5
#define B2 6
#define B1 7

// The layers need to be numbered in the order they are below,
// starting from zero.
#define L_BASE 0
#define L_NUM  1
#define L_PAR  2
#define L_NAV  3
#define L_MED  4
#define L_EDT  5
#define L_FUN  6
#define L_MSE  7
#define L_BT_S 8



// Delay for combo
#undef COMBO_TERM
#define COMBO_TERM 175
#define NAV_TAP_TERM 300
#define TAPDANCE_TERM 400
#define TAPDANCE_2_TERM 300
#define TAPDANCE_3_TERM 400
#define TAPDANCE_4_TERM 500
#define HOLDTAP_TERM 250
#define HOLDTAP_LAYER_TERM 400
#define TIMEOUT_STICKY_LEADER_KEY  5000

&sk {
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&sl { 
  release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
&mt {
  tapping-term-ms = <HOLDTAP_TERM>;
};
&lt {
  tapping-term-ms = <HOLDTAP_LAYER_TERM>;
};

/ { behaviors {
  togkey_stikey: behavior_sk_tog {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_TERM>;
    bindings = <&sk>, <&kt>;
  };
  
  caps_tog: behavior_caps_tog {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_TERM>;
    bindings = <&caps_word>, <&kp>;
  };
  
  release_all: release_all {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
      , <&to L_BASE>
      ;
  };
  
  toglay_key: behavior_toglay_key {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <HOLDTAP_LAYER_TERM>;
    bindings = <&to>, <&kp>;
  };
  
  kd: behavior_keydown {
    compatible = "zmk,behavior-key-toggle";
    #binding-cells = <1>;
    display-name = "Key Toggle On";
    toggle-mode = "on";
  };

  ku: behavior_keyup {
    compatible = "zmk,behavior-key-toggle";
    #binding-cells = <1>;
    display-name = "Key Toggle Off";
    toggle-mode = "off";
  };
  
  lay_off: behavior_layer_off {
    compatible = "zmk,behavior-toggle-layer";
    #binding-cells = <1>;
    display-name = "Toggle Layer On";
    toggle-mode = "off";

  };
    
  unmod: macro_release_mods {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&lay_off L_FUN &lay_off L_MSE &lay_off L_BT_S>
      , <&ku LSHFT &ku LCTRL &ku LALT &ku RALT &ku LGUI>
      ;
  };
  
  
  nxkbly: macro_next_keyboard_layout {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
      = <&kp GLOBE &kp LA(LSHFT)>
      ;
  };
  
  
  test: macro_test {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <10>;
    bindings = 
      <&kp F &kp A &kp S &kp T>
    , <&macro_wait_time 500>
    , <&kp S &kp L &kp O &kp W>
    ;
    
  };
  
  
  
  
}; };
#define SK_TK(key) &togkey_stikey key key   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer




// Does this work? 
// ZMK_COMBO(release_mods, &release_all, T1 B1)

// Tap dance is difficult with fingers 3 & 4, better use mod-taps



// Combos NUM layer
ZMK_COMBO(num_7, &mt DOLLAR N7,    T2 T1, L_NUM)
ZMK_COMBO(num_8, &kp N8       , T3 T2   , L_NUM)
ZMK_COMBO(num_0, &mt DEGREE N0, B3 B2   , L_NUM)
ZMK_COMBO(num_9, &mt HASH   N9,    B2 B1, L_NUM)
ZMK_COMBO(num_E, &mt GBP  EURO, T3    T1, L_NUM)
ZMK_COMBO(num_Y, &kp YEN      , B3    B1, L_NUM)
// ZMK_COMBO(num_D, &kp      , T3 T2 T1, L_NUM)
// ZMK_COMBO(num_???, &kp ?, B3 B1, L_NUM)
// ZMK_COMBO(num_???, &kp ?, B3 B2 B1, L_NUM)


// Combos NAV+Mouse layer
ZMK_COMBO(mouse_b1,  &mkp MB1 ,    T2 T1, L_NAV)
ZMK_COMBO(mouse_b2,  &mkp MB2 , T3 T2   , L_NAV)
ZMK_COMBO(mouse_b3,  &mkp MB3 , T3 T2 T1, L_NAV)
ZMK_COMBO(mouse_b4,  &mkp MB4 , T3    T1, L_NAV)
ZMK_COMBO(nav_up,    &kp UP   , B3 B2   , L_NAV)
ZMK_COMBO(nav_dn,    &kp DOWN ,    B2 B1, L_NAV)
ZMK_COMBO(nav_pgup,  &kp PG_UP, B3    B1, L_NAV)
ZMK_COMBO(nav_pgdn,  &kp PG_DN, B3 B2 B1, L_NAV)

ZMK_TAP_DANCE(left_home, bindings = <&mt HOME LEFT>, <&kp LC(LEFT)>;  tapping-term-ms = <NAV_TAP_TERM>; )
ZMK_TAP_DANCE(right_end, bindings = <&mt END RIGHT>, <&kp LC(RIGHT)>; tapping-term-ms = <NAV_TAP_TERM>; )


// Combos Media layer
ZMK_COMBO(media_play, &kp K_PLAY_PAUSE, B3 B2 , L_MED)



// Combos BLUETOOTH layer
ZMK_COMBO(layer_bt_select,          &sl L_BT_S, T1 B1             T4 B4) // ALL layers
ZMK_COMBO(bt_clear_current_profile, &bt BT_CLR,       T3 T2 B3 B2      , L_BT_S)


// Combos L_MSE layer
ZMK_COMBO(lay_mouse, &tog L_MSE,    T3 B2 T1, L_BASE L_MSE)
ZMK_COMBO(combo_mb3,   &mkp MB3,    T3    T1, L_MSE)
ZMK_COMBO(combo_mb4,   &mkp MB4,    T3 T2   , L_MSE)
ZMK_COMBO(combo_mb5,   &mkp MB5,       T2 T1, L_MSE)




// Base letter combos
ZMK_TAP_DANCE(star_sharp, bindings = <&mt STAR S>, <&kp S_SRP>;  tapping-term-ms = <TAPDANCE_2_TERM>; )

ZMK_COMBO(combo_b,  &mt AMPS  B, T4 T3      , L_BASE)
ZMK_COMBO(combo_c,  &mt C_CDL C,    T3 T2   , L_BASE)
ZMK_COMBO(combo_d,  &mt DLLR  D,       T2 T1, L_BASE)
ZMK_COMBO(combo_h,  &mt HASH  H,       B2 B1, L_BASE)
ZMK_COMBO(combo_u,  &mt UNDER U,    B3 B2   , L_BASE)
ZMK_COMBO(combo_g,  &mt GBP   G, B4 B3      , L_BASE)

ZMK_COMBO(combo_k,  &mt AELIG K,    T3    T1, L_BASE)
ZMK_COMBO(combo_y,  &mt OELIG Y,    B3    B1, L_BASE)
ZMK_COMBO(combo_j,  &kp       J, T4    T2   , L_BASE)
ZMK_COMBO(combo_z,  &kp       Z, B4    B2   , L_BASE)

ZMK_COMBO(combo_v,  &mt D_DRS V, T4       T1, L_BASE)
ZMK_COMBO(combo_x,  &mt D_CRC X, B4       B1, L_BASE)

ZMK_COMBO(combo_p,  &mt PIPE  P, T4 T3    T1, L_BASE)
ZMK_COMBO(combo_q,  &mt PRCNT Q, B4 B3    B1, L_BASE)

ZMK_COMBO(combo_l,  &mt PLUS  L,    T3 T2 T1, L_BASE)
ZMK_COMBO(combo_m,  &mt MINUS M,    B3 B2 B1, L_BASE)

ZMK_COMBO(combo_f,  &kp       F, T4 T3 T2   , L_BASE)
ZMK_COMBO(combo_w,  &mt AT    W, B4 B3 B2   , L_BASE)

ZMK_COMBO(combo_sp, &kp   SPACE, B4 B3 B2 B1, L_BASE)


// Base punctuation
ZMK_COMBO(combo_slash,  &mt D_ACU SLASH, B4       T1, L_BASE)
ZMK_COMBO(combo_backs,  &mt D_GRV BSLH , T4       B1, L_BASE)
ZMK_COMBO(combo_comma,  &mt DOT COMMA  ,       B2 T1, L_BASE)
ZMK_COMBO(combo_colon,  &mt COLON SEMI ,    B2 T2   , L_BASE)
ZMK_COMBO(combo_quote,  &mt DQT SQT    ,    B3 T3   , L_BASE)
ZMK_COMBO(combo_exclq,  &mt QMARK EXCL , B4 T4      , L_BASE)



// GLOBAL Combos 
ZMK_COMBO(combo_enter,     &kp ENTER        ,       T1 B1)

ZMK_COMBO(combo_backspace, &mt LC(BSPC) BSPC,       T2 B1)
ZMK_COMBO(combo_delete,    &mt LC(DEL)  DEL ,    B3 T2   )
ZMK_COMBO(combo_escape,    &kp ESC          , B4 T3      )
ZMK_COMBO(combo_tab,       &mt LS(TAB)  TAB , B4 T3 T2   )



// Combos modifiers
ZMK_COMBO(combo_shift,    &kt  LSHFT,    T3    B1)
ZMK_COMBO(combo_capsock,  &kp  CAPS , T4 T3    B1)
ZMK_COMBO(combo_ctrl,     &kt  LCTRL,    T3 T2 B1)

ZMK_COMBO(combo_alt,      &kt   LALT,    T3 B2 B1)
ZMK_COMBO(combo_altgr,    &sk   RALT, B4 T3 B2 B1)

ZMK_COMBO(combo_gui,      &sk   LGUI, T4 T3 B2 B1)
ZMK_COMBO(combo_kblayout, &nxkbly,    B4 B3 T2 T1)

// FIXME: should this be enabled?
ZMK_COMBO(combo_unmod,    &unmod,     T4 T3 T2 T1)

// ZMK_COMBO(combo_alt,     &togkey_stikey LALT   LALT,    T3 B2 B1)


// ZMK_COMBO(name, bindings, keypos, layers, timeout, prior_idle, extra)
ZMK_COMBO(combo_reset,   &sys_reset,  0 1 2 3 4 5 6 7)
ZMK_COMBO(combo_reflash, &bootloader, B4 B3 B2 B1 T1)


// TODO: Ins, hold-space, hold-enter, hold-t, hold-f
//    HOLD: space, enter, escape. unmod, caps, LGUI, T, F, J, Z, *, YEN
//    MEH key
// Most used keyboard shortcuts Alt+Tab, Alt+Shift+Tab
// 
// Display


/ { keymap { compatible = "zmk,keymap";
  base {
    display-name = "Base";
    bindings = <
      &lt L_NUM R   &lt L_EDT I   &kp      T    &lt L_FUN A
      &lt L_NAV N   &lt L_PAR O   &star_sharp   &lt L_MED E
    >;
  };
  numbers {
    display-name = "NUM";
    bindings = <
      &mo L_NUM    &mt STAR  N3   &mt SUP2 N2    &mt DOT   N1
      &none        &mt SLASH N6   &mt STAR N5    &mt COMMA N4
    >;
  };
  parentheses {
    display-name = "PAR";
    bindings = <
      &none             &none       &mt RBKT LBKT   &mt RPAR LPAR
      &mt TILDE EQUAL   &mo L_PAR   &mt RBRC LBRC   &mt GT   LT  
    >;
  };
  
  quicknav {
    display-name = "NAV";
    bindings = <                      
      &none       &mmv MOVE_UP     &mmv MOVE_LEFT   &mmv MOVE_RIGHT
      &mo L_NAV   &mmv MOVE_DOWN   &left_home       &right_end
    >;         
  };
  media {
    display-name = "MED";
    bindings = <
      &test   &mt K_MUTE  K_VOL_DN    &mt K_MUTE  K_VOL_UP   &kp PRINTSCREEN
      &none   &mt K_PP    K_PREV      &mt K_PP    K_NEXT     &mo L_MED
    >;
  };
  shortcuts {
    display-name = "EDT";
    bindings = <
      &none   &mo L_EDT  &mt CLIPPASTE2 CLIPPASTE  &mt CLIPCUT CLIPCOPY
      &none   &none      &mt SAVEAS     SAVE       &mt REDO    UNDO
    >;
  };
  
  functionkeys {
    display-name = "FUN";
    bindings = <
      &mt F2 F1    &mt F4  F3    &mt F6  F5    &mo L_FUN
      &mt F8 F7    &mt F10 F9    &mt F12 F11   &none
    >;
  };
  mouse { 
    display-name = "MOUSE";
    bindings = <
     &msc SCRL_UP    &mkp MB2       &mmv MOVE_UP   &mkp MB1
     &msc SCRL_DOWN  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT
    >;
  };
  
  bt {
    display-name = "BT";
    bindings = <
      &out OUT_BLE   &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
      &out OUT_USB   &bt BT_SEL 5  &bt BT_SEL 4  &bt BT_SEL 3
    >;
  };

}; };


